import secrets
from datetime import (  # –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    UTC,
    datetime,
    timedelta,
)
from typing import Any  # Removed Union import as it's no longer needed

import jwt
from beanie import PydanticObjectId
from fastapi import HTTPException, status

from src.config import config
from src.models import RefreshToken


def create_access_token(data: dict[str, Any]) -> str:
    """
    üîë –°–æ–∑–¥–∞—ë—Ç JWT access token –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    to_encode = data.copy()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PydanticObjectId –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if "sub" in to_encode and isinstance(to_encode["sub"], (PydanticObjectId, str)):
        to_encode["sub"] = str(to_encode["sub"])

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    expire = datetime.now(UTC) + timedelta(minutes=config.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})

    # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JWT
    return jwt.encode(
        to_encode, config.SECRET_KEY, algorithm=config.JWT_ALGORITHM
    )  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (—Å—Ç—Ä–æ–∫–∞)


def verify_access_token(token: str) -> dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - token: —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –°–ª–æ–≤–∞—Ä—å (payload), –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
    - –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–¥–¥–µ–ª–∞–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫
    """
    try:
        # üîê –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        return jwt.decode(token, config.SECRET_KEY, algorithms=[config.JWT_ALGORITHM])
    except jwt.InvalidTokenError:
        # ‚ùå –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401 Unauthorized
        # from None - —Å–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π traceback, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –∫–ª–∏–µ–Ω—Ç—É
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid or expired token"
        ) from None


def create_refresh_token() -> tuple[str, datetime, datetime]:
    """
    –°–æ–∑–¥–∞—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π refresh —Ç–æ–∫–µ–Ω, –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è.
    """
    token = secrets.token_urlsafe(64)  # üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–∞–∫ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π ID
    created_at = datetime.now(UTC)
    expires_at = created_at + timedelta(days=config.REFRESH_TOKEN_EXPIRE_DAYS)
    return token, created_at, expires_at


async def verify_refresh_token(token: str) -> RefreshToken:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π refresh —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ,
    –∏ –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Beanie-–¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω.
    """

    # üîé –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ MongoDB –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞
    token_doc = await RefreshToken.find_one(RefreshToken.token == token)

    # ‚ùå –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É 401
    if not token_doc:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid refresh token"
        )

    # ‚è≥ –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
    if token_doc.expires_at.replace(tzinfo=UTC) < datetime.now(UTC):
        _ = await token_doc.delete()  # üíÄ –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Refresh token expired"
        )

    # ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    return token_doc


async def save_refresh_token_to_db(
    user_id: str, token: str, created_at: datetime, expires_at: datetime
) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–æ–∫—É–º–µ–Ω—Ç RefreshToken –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB.
    """
    refresh_token_doc = RefreshToken(
        user_id=PydanticObjectId(user_id),  # Convert string ID to PydanticObjectId
        token=token,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        created_at=created_at,  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        expires_at=expires_at,  # –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç
    )

    _ = await refresh_token_doc.insert()  # üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ MongoDB
