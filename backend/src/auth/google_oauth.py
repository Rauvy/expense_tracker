from fastapi import HTTPException, status
from google.auth.transport import requests as google_requests
from google.oauth2 import id_token

from src.auth.dependencies import validate_google_names
from src.auth.exceptions import (
    raise_conflict_error,
    raise_invalid_token_error,
)
from src.auth.jwt import (
    create_access_token,
    create_refresh_token,
    save_refresh_token_to_db,
)
from src.models import User
from src.schemas.base import TokenResponse


async def handle_google_login(id_token_str: str) -> TokenResponse:
    """
    üîê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Google:
    - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å id_token
    - –∏–∑–≤–ª–µ–∫–∞–µ—Ç email –∏ Google ID
    - –Ω–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç access –∏ refresh —Ç–æ–∫–µ–Ω—ã
    """

    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (—á–µ—Ä–µ–∑ Google-—Å–µ—Ä–≤–µ—Ä)
        id_info = id_token.verify_oauth2_token(
            id_token_str,
            google_requests.Request(),
        )

        email = id_info.get("email")
        google_sub = id_info.get("sub")

        if not email or not google_sub:
            raise_invalid_token_error(
                "Invalid Google token: missing required fields (email or sub)."
            )

        # üîç –ò—â–µ–º –ø–æ google_id
        user = await User.find_one({"google_id": google_sub})

        if not user:
            # üîÅ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ email
            user = await User.find_one({"email": email})

            if user:
                # ‚ö†Ô∏è Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —é–∑–µ—Ä–æ–º
                if not user.google_id:
                    raise_conflict_error(
                        "User with this email already exists. Use email/password login."
                    )
                else:
                    # üîß –û–±–Ω–æ–≤–ª—è–µ–º google_id, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
                    user.google_id = google_sub
                    _ = await user.save()
            else:
                # üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                given_name = id_info.get("given_name")
                family_name = id_info.get("family_name")
                validate_google_names(given_name, family_name)

                user = User(
                    email=email,
                    hashed_password=None,
                    google_id=google_sub,
                    first_name=given_name,
                    last_name=family_name,
                    birth_date=id_info.get("birthdate"),
                )
                _ = await user.insert()

        # ü™™ –°–æ–∑–¥–∞–Ω–∏–µ access/refresh —Ç–æ–∫–µ–Ω–æ–≤
        access_token = create_access_token({"sub": str(user.id)})
        refresh_token, created_at, expires_at = create_refresh_token()

        await save_refresh_token_to_db(
            user_id=str(user.id),
            token=refresh_token,
            created_at=created_at,
            expires_at=expires_at,
        )

    except ValueError as err:
        # ‚õî –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid or expired Google ID token."
        ) from err

    except HTTPException:
        # üö´ –£–∂–µ –≤—ã–±—Ä–æ—à–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        raise

    except Exception as err:
        # üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error during Google login.",
        ) from err

    else:
        # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–æ–∫–µ–Ω—ã
        return TokenResponse(
            access_token=access_token,
            refresh_token=refresh_token,
        )
