from typing import Annotated  # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

from beanie import PydanticObjectId  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB ID (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
from fastapi import APIRouter, Depends, HTTPException, Request, status  # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã FastAPI

from src.auth.dependencies import (
    get_current_user,  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
)
from src.auth.jwt import (
    create_access_token,  # –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª
    create_refresh_token,
    save_refresh_token_to_db,
    verify_refresh_token,
)
from src.models import User  # –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /account –∏ —Ç–µ–≥–æ–º Protected (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Swagger)
router = APIRouter(prefix="/account", tags=["Protected"])


@router.get("/me")  # –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_me(
    current_user: Annotated[
        User, Depends(get_current_user)
    ],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Annotated –≤–º–µ—Å—Ç–æ = Depends(...)
) -> dict[str, str]:
    return {
        "id": str(current_user.id),  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "email": current_user.email,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ email
    }


@router.delete("/delete")  # –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_account(
    current_user: Annotated[User, Depends(get_current_user)],  # –¢–∞–∫–∂–µ –∑–∞—â–∏—â—ë–Ω —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞
) -> dict[str, str]:
    await current_user.delete()  # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    return {"message": "Account deleted successfully"}  # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É



@router.post("/refresh")
async def refresh_tokens(request: Request):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç access –∏ refresh —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π refresh —Ç–æ–∫–µ–Ω.
    """
    # üì• –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ JSON
    data = await request.json()
    incoming_token = data.get("refresh_token")

    if not incoming_token:
        raise HTTPException(status_code=400, detail="Refresh token required")

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
    token_doc = await verify_refresh_token(incoming_token)

    # ‚ùå –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω (—Ä–æ—Ç–∞—Ü–∏—è)
    await token_doc.delete()

    # üÜï –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
    new_refresh_token, created_at, expires_at = create_refresh_token()

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
    await save_refresh_token_to_db(
        user_id=token_doc.user_id,
        token=new_refresh_token,
        created_at=created_at,
        expires_at=expires_at,
    )

    # ü™™ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω (—Å payload –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id)
    new_access_token = create_access_token({"sub": token_doc.user_id})

    # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É
    return {"access_token": new_access_token, "refresh_token": new_refresh_token}

@router.post("/logout")
async def logout(request: Request):
    """
    –£–¥–∞–ª—è–µ—Ç refresh —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã. –í—ã—Ö–æ–¥ —Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
    """
    # üì• –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    data = await request.json()
    incoming_token = data.get("refresh_token")

    if not incoming_token:
        raise HTTPException(status_code=400, detail="Refresh token required")

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_doc = await verify_refresh_token(incoming_token)

    # üóë –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω (–≤—ã—Ö–æ–¥)
    await token_doc.delete()

    return {"detail": "Successfully logged out"}