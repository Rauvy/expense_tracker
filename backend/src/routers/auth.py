# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FastAPI
import json
from typing import Annotated

from fastapi import APIRouter, Depends, HTTPException, Request, status

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
from passlib.context import CryptContext

from src.auth.dependencies import get_current_user
from src.auth.google_oauth import TokenResponse, handle_google_login

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
from src.auth.jwt import (
    create_access_token,  # –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª
    create_refresh_token,
    save_refresh_token_to_db,
    verify_refresh_token,
)

# –ò–º–ø–æ—Ä—Ç Beanie –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–±–æ—Ç–∞ —Å MongoDB)
from src.models import RefreshToken, User

# –ò–º–ø–æ—Ä—Ç Pydantic-—Å—Ö–µ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
from src.schemas.base import GoogleLoginPayload, UserCreate, UserLogin, UserPublic

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ "/auth"
router = APIRouter(prefix="/auth", tags=["Auth"])

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π —Å –ø–æ–º–æ—â—å—é bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


# –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def hash_password(password: str) -> str:
    return pwd_context.hash(password)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register")  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register(
    user_in: UserCreate,
) -> UserPublic:  # user_in ‚Äî –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ (email + –ø–∞—Ä–æ–ª—å)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    existing_user = await User.find_one(User.email == user_in.email)
    if existing_user:
        # –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User with this email already exists",
        )

    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    hashed = hash_password(user_in.password)

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    user = User(
        email=user_in.email,
        hashed_password=hashed,
        first_name=user_in.first_name,
        last_name=user_in.last_name,
        birth_date=user_in.birth_date,
        balance=user_in.initial_balance,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    )
    _ = await user.insert()

    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ user.id –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è ‚Äî –æ—à–∏–±–∫–∞
    if not user.id:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Failed to create user"
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    return UserPublic(
        id=user.id,
        email=user.email,
        first_name=user.first_name,
        last_name=user.last_name,
        birth_date=user.birth_date,
        balance=user.balance,  # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/login")
async def login(user_in: UserLogin) -> dict[str, str]:
    user = await User.find_one(User.email == user_in.email)
    if not user or not pwd_context.verify(user_in.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
        )

    access_token = create_access_token({"sub": str(user.id)})
    refresh_token, created_at, expires_at = create_refresh_token()

    await save_refresh_token_to_db(
        user_id=str(user.id),
        token=refresh_token,
        created_at=created_at,
        expires_at=expires_at,
    )

    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer",
    }  # Standard OAuth 2.0 token type


@router.post("/google")
async def google_login(payload: GoogleLoginPayload) -> TokenResponse:
    """
    üîê –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Google:
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id_token –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ Google,
    —Å–æ–∑–¥–∞—ë—Ç —é–∑–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã.
    """
    # üì• –ü–æ–ª—É—á–∞–µ–º id_token –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    id_token_str = payload.id_token

    # ‚ùå –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –æ—à–∏–±–∫–∞
    if not id_token_str:
        raise HTTPException(status_code=400, detail="id_token required")

    # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –≤—Å—é –º–∞–≥–∏—é
    return await handle_google_login(id_token_str)


@router.post("/refresh")
async def refresh_tokens(request: Request) -> dict[str, str]:
    """
    üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token
    2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh token
    3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π refresh token
    4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π access token
    """
    data = await request.json()
    incoming_token = data.get("refresh_token")

    if not incoming_token:
        raise HTTPException(status_code=400, detail="Refresh token required")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_doc = await verify_refresh_token(incoming_token)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
    _ = await token_doc.delete()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
    new_refresh_token, created_at, expires_at = create_refresh_token()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
    await save_refresh_token_to_db(
        user_id=str(token_doc.user_id),
        token=new_refresh_token,
        created_at=created_at,
        expires_at=expires_at,
    )

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π access token
    new_access_token = create_access_token({"sub": str(token_doc.user_id)})

    return {
        "access_token": new_access_token,
        "refresh_token": new_refresh_token,
        "token_type": "bearer",  # Standard OAuth 2.0 token type
    }


@router.post("/logout")
async def logout(request: Request) -> dict[str, str]:
    """
    üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:
    1. –ü–æ–ª—É—á–∞–µ–º refresh token –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    2. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
    """
    try:
        data = await request.json()
    except json.JSONDecodeError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="Missing or invalid JSON body"
        ) from e

    incoming_token = data.get("refresh_token")

    if not incoming_token:
        raise HTTPException(status_code=400, detail="Refresh token required")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_doc = await verify_refresh_token(incoming_token)

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
    _ = await token_doc.delete()

    return {"detail": "Successfully logged out"}


@router.post("/logout-all")
async def logout_all(
    current_user: Annotated[User, Depends(get_current_user)],
) -> dict[str, str]:
    """
    üö™ –í—ã—Ö–æ–¥ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:
    1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ access token
    2. –£–¥–∞–ª—è–µ–º –≤—Å–µ refresh —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not current_user or not current_user.id:
        raise HTTPException(status_code=401, detail="Invalid user")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ refresh —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _ = await RefreshToken.find(RefreshToken.user_id == current_user.id).delete()

    return {"detail": "Logged out from all devices"}
