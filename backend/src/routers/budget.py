from typing import Annotated  # ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å Depends

from fastapi import APIRouter, Depends, HTTPException, status  # üöÄ FastAPI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

from src.auth.dependencies import get_current_user  # üîê –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from src.models import Budget, User  # üß† –ú–æ–¥–µ–ª—å –±—é–¥–∂–µ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from src.schemas.budget import BudgetCreate, BudgetPublic, BudgetUpdate  # üì¶ –°—Ö–µ–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã

# ‚öôÔ∏è –†–æ—É—Ç–µ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /budgets
router = APIRouter(prefix="/budgets", tags=["Budgets"])


@router.post("/", status_code=status.HTTP_201_CREATED)
async def create_budget(
    budget_in: BudgetCreate,  # üîΩ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è + –ª–∏–º–∏—Ç)
    current_user: Annotated[User, Depends(get_current_user)],  # üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
) -> BudgetPublic:
    """
    ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if not current_user.id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User ID is required",
        )

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    existing = await Budget.find_one(
        Budget.user_id == current_user.id,
        Budget.category == budget_in.category,
    )
    if existing:
        # ‚ö†Ô∏è –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –±—Ä–æ—Å–∞–µ–º 409 –æ—à–∏–±–∫—É (–∫–æ–Ω—Ñ–ª–∏–∫—Ç)
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Budget for this category already exists.",
        )

    # üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç
    budget = Budget(user_id=current_user.id, **budget_in.model_dump())

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    _ = await budget.insert()

    # üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø—É–±–ª–∏—á–Ω—É—é —Å—Ö–µ–º—É
    return BudgetPublic(**budget.model_dump())


@router.get("/")
async def get_budgets(
    current_user: Annotated[User, Depends(get_current_user)],
) -> list[BudgetPublic]:
    """
    üìÑ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not current_user.id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User ID is required",
        )

    # üì¶ –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ –±—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    budgets = await Budget.find(Budget.user_id == current_user.id).to_list()

    # üßæ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ö–µ–º
    return [BudgetPublic(**b.model_dump()) for b in budgets]


@router.put("/{category}")
async def update_budget(
    category: str,  # üè∑ –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ URL
    update: BudgetUpdate,  # üõ† –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    current_user: Annotated[User, Depends(get_current_user)],  # üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
) -> BudgetPublic:
    """
    ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –±—é–¥–∂–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if not current_user.id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User ID is required",
        )

    # üîé –ò—â–µ–º –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    budget = await Budget.find_one(
        Budget.user_id == current_user.id,
        Budget.category == category,
    )
    if not budget:
        # ‚ùå –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî 404
        raise HTTPException(status_code=404, detail="Budget not found")

    # üí∏ –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
    budget.limit = update.limit

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º
    _ =await budget.save()

    # üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º
    return BudgetPublic(**budget.model_dump())


@router.delete("/{category}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_budget(
    category: str,  # üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤ URL
    current_user: Annotated[User, Depends(get_current_user)],  # üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
) -> None:
    """
    ‚ùå –£–¥–∞–ª–∏—Ç—å –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if not current_user.id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User ID is required",
        )

    # üîé –ò—â–µ–º –±—é–¥–∂–µ—Ç
    budget = await Budget.find_one(
        Budget.user_id == current_user.id,
        Budget.category == category,
    )
    if not budget:
        # ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ‚Äî 404
        raise HTTPException(status_code=404, detail="Budget not found")

    # üßπ –£–¥–∞–ª—è–µ–º
    _ = await budget.delete()
