import re
from typing import Annotated

from beanie import PydanticObjectId
from fastapi import APIRouter, Depends, HTTPException, status

from src.auth.dependencies import get_current_user
from src.models import Category, Transaction, User
from src.schemas.category_schemas import CategoryCreate, CategoryPublic, CategoryUpdate

router = APIRouter(prefix="/categories", tags=["Categories"])


@router.get("/")
async def get_categories(
    current_user: Annotated[User, Depends(get_current_user)],
) -> list[CategoryPublic]:
    """
    üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ —é–∑–µ—Ä–∞)
    """
    categories = await Category.find(
        {"$or": [{"user_id": current_user.id}, {"user_id": None}]}
    ).to_list()

    return [CategoryPublic.model_validate(cat.model_dump()) for cat in categories]
    # ‚úÖ .model_validate() ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ model_dump
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π


@router.post("/", status_code=status.HTTP_201_CREATED)
async def create_category(
    category_in: CategoryCreate, current_user: Annotated[User, Depends(get_current_user)]
) -> CategoryPublic:
    """
    ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–±–µ–∑ –¥—É–±–ª–µ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã)
    """
    # üßº –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∏–º–µ–Ω–∏
    clean_name = category_in.name.strip()

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤)
    existing = await Category.find_one(
        {
            "user_id": current_user.id,
            "name": {"$regex": f"^{re.escape(clean_name)}$", "$options": "i"},
        }
    )

    if existing:
        raise HTTPException(status_code=400, detail="Category with this name already exists.")

    # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = Category(
        name=clean_name,
        icon=category_in.icon,
        user_id=PydanticObjectId(current_user.id),
        color=category_in.color,
        is_default=False,
    )
    _ = await category.insert()

    return CategoryPublic.model_validate(category.model_dump())


@router.delete("/{category_id}")
async def delete_category(
    category_id: PydanticObjectId, current_user: Annotated[User, Depends(get_current_user)]
) -> dict[str, str]:
    """
    ‚ùå –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–º–µ–Ω–∏—Ç—å –µ—ë –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –Ω–∞ 'Uncategorized'
    """
    category = await Category.get(category_id)

    if not category:
        raise HTTPException(status_code=404, detail="Category not found")

    if category.user_id != current_user.id:
        raise HTTPException(
            status_code=403, detail="You are not authorized to delete this category"
        )

    # üëá –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    _ = await Transaction.find(
        Transaction.user_id == current_user.id, Transaction.category == category.name
    ).update_many({"$set": {"category": "Uncategorized"}})

    # ÔøΩÔøΩ –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    _ = await category.delete()

    return {"detail": "Category deleted successfully"}


@router.put("/{category_id}")
async def update_category(
    category_id: PydanticObjectId,
    category_in: CategoryUpdate,
    current_user: Annotated[User, Depends(get_current_user)],
) -> CategoryPublic:
    """
    ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
    category = await Category.get(category_id)

    if not category:
        raise HTTPException(status_code=404, detail="Category not found")

    if category.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to update this category")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    if category_in.name is not None:
        category.name = category_in.name
    if category_in.color is not None:
        category.color = category_in.color
    if category_in.icon is not None:
        category.icon = category_in.icon

    _ = await category.save()

    return CategoryPublic.model_validate(category.model_dump())


@router.get("/{category_id}")
async def get_category_by_id(
    category_id: PydanticObjectId,
    current_user: Annotated[User, Depends(get_current_user)],
) -> CategoryPublic:
    """
    üîç –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å Beanie + FastAPI)
    """
    category = await Category.get(category_id)

    if not category or category.user_id != current_user.id:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Category not found")

    return CategoryPublic(**category.model_dump())
