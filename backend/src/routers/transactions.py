from typing import Annotated, Any, Literal

from beanie import PydanticObjectId
from fastapi import APIRouter, Depends, HTTPException, Query, status

from src.auth.dependencies import get_current_user
from src.models import Transaction, TransactionType, User
from src.schemas.base import PaginatedTransactionsResponse, TransactionCreate, TransactionPublic
from src.utils.analytics_helper import get_paginated_transactions_for_user

router = APIRouter(prefix="/transactions", tags=["Transactions"])


@router.post("/", status_code=status.HTTP_201_CREATED)
async def create_transaction(
    transaction_in: TransactionCreate,
    current_user: Annotated[User, Depends(get_current_user)],
) -> TransactionPublic:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ—Ö–æ–¥)
    """
    if not current_user.id:
        raise HTTPException(status_code=400, detail="User ID is required")

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction = Transaction(
        **transaction_in.model_dump(), user_id=PydanticObjectId(current_user.id)
    )

    _ = await transaction.insert()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if transaction.type == TransactionType.EXPENSE:
        current_user.balance -= transaction.amount
    else:  # income
        current_user.balance += transaction.amount

    _ = await current_user.save()

    return TransactionPublic(**transaction.model_dump())


@router.get(
    "/all",
)
async def get_all_transactions(
    current_user: Annotated[User, Depends(get_current_user)],
    source_filter: Annotated[Literal["manual", "plaid"] | None, Query] = None,
    transaction_type: Annotated[TransactionType | None, Query] = None,
    limit: Annotated[int, Query] = 20,
    offset: Annotated[int, Query] = 0,
) -> PaginatedTransactionsResponse:
    """
    üîÑ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä—É—á–Ω—ã–µ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:
    - –ø–æ source (manual / plaid)
    - –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (income / expense)
    """
    if not current_user.id:
        raise HTTPException(status_code=400, detail="User ID is missing")

    result = await get_paginated_transactions_for_user(
        user_id=current_user.id,
        source_filter=source_filter,
        transaction_type=transaction_type,
        limit=limit,
        offset=offset,
    )
    return PaginatedTransactionsResponse(**result)


@router.get("/{transaction_id}")
async def get_transaction_by_id(
    transaction_id: PydanticObjectId,
    current_user: Annotated[User, Depends(get_current_user)],
) -> TransactionPublic:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID
    """
    transaction = await Transaction.get(transaction_id)

    if not transaction:
        raise HTTPException(status_code=404, detail="Transaction not found")

    if transaction.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to access this transaction")

    return TransactionPublic(**transaction.model_dump())


@router.put("/{transaction_id}")
async def update_transaction(
    transaction_id: PydanticObjectId,
    transaction_in: TransactionCreate,
    current_user: Annotated[User, Depends(get_current_user)],
) -> dict[str, str]:
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    transaction = await Transaction.get(transaction_id)

    if not transaction:
        raise HTTPException(status_code=404, detail="Transaction not found")

    if transaction.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to update this transaction")

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if transaction.type == TransactionType.EXPENSE:
        current_user.balance += transaction.amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É
    else:  # income
        current_user.balance -= transaction.amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É
    if transaction_in.type == TransactionType.EXPENSE:
        current_user.balance -= transaction_in.amount
    else:  # income
        current_user.balance += transaction_in.amount

    _ = await current_user.save()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction.type = transaction_in.type
    transaction.amount = transaction_in.amount
    transaction.category = transaction_in.category
    transaction.payment_method = transaction_in.payment_method
    transaction.description = transaction_in.description

    if transaction_in.date:
        transaction.date = transaction_in.date

    _ = await transaction.save()

    return {"message": "Transaction updated successfully"}


@router.delete("/{transaction_id}")
async def delete_transaction(
    transaction_id: PydanticObjectId,
    current_user: Annotated[User, Depends(get_current_user)],
) -> dict[str, str]:
    """
    –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    transaction = await Transaction.get(transaction_id)

    if not transaction:
        raise HTTPException(status_code=404, detail="Transaction not found")

    if transaction.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to delete this transaction")

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if transaction.type == TransactionType.EXPENSE:
        current_user.balance += transaction.amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞
    else:  # income
        current_user.balance -= transaction.amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞

    _ = await current_user.save()

    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    _ = await transaction.delete()

    return {"message": "Transaction deleted successfully"}
